// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "sqlite"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

model Amenity {
  id         String     @id @default(uuid())
  name       String //@unique // boilerplate test suite uses duplicates
  // relationships
  properties Property[] // Implicit relation to many properties
}

model Host {
  id             String     @id @default(uuid())
  username       String // @unique
  password       String
  name           String
  email          String //@unique // boilerplate test suite uses duplicates
  phoneNumber    String
  profilePicture String?
  aboutMe        String?
  // relationships
  properties     Property[] // Implicit relation to many properties
}

model User {
  id             String    @id @default(uuid())
  username       String // @unique
  password       String
  name           String
  email          String //@unique // boilerplate test suite uses duplicates
  phoneNumber    String
  profilePicture String?
  // relationships
  reviews        Review[] // Implicit relation to many reviews
  bookings       Booking[] // Implicit relation to many bookings
}

model Property {
  id            String    @id @default(uuid())
  title         String
  description   String
  location      String
  pricePerNight Float
  bedroomCount  Int
  bathRoomCount Int
  maxGuestCount Int
  rating        Int
  // relationships
  amenities     Amenity[] // Implicit relation to many amenities
  bookings      Booking[] // Implicit relation to many bookings
  reviews       Review[] // Implicit relation to many reviews
  // relation references
  hosts         Host      @relation(fields: [hostId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  hostId        String // Explicit relation to host id

  @@index([hostId])
}

model Booking {
  id             String   @id @default(uuid())
  checkinDate    DateTime
  checkoutDate   DateTime
  numberOfGuests Int
  totalPrice     Float
  bookingStatus  String
  // relation references
  properties     Property @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  propertyId     String // Explicit relation field to the property id
  users          User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId         String // Explicit relation to user id

  @@index([propertyId])
  @@index([userId])
}

model Review {
  id         String   @id @default(uuid())
  rating     Int
  comment    String
  // relation references
  properties Property @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  propertyId String // Explicit relation to property id
  users      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId     String // Explicit relation to user id

  @@index([propertyId])
  @@index([userId])
}
